Boot Camper:  Matt Hodges, aka hier01

CHAPTER 1 QUESTS


---------------- DAY 1 ---(done)----------------------------

Q1.  Explain what the Blockchain is:

It's a kind of database where the records are added in sequence and prior records can't be changed.
It's decentralized, meaning many copies of it are spread all over the place, 
so no single agency can mess with it without everybody knowing.  
It can be public or private, but public is better.  



Q2.  Explain what a Smart Contract is:

It's a lump of code that's stored on a blockchain (so it can't be messed with).
It's run by a virtual machine built into the blockchain (so it also can't be messed with).
Many nodes that run copies of the blockchain have the ability to run smart contracts.
Smart contracts can read and write results into the blockchain.
Every node should produce identical results.



Q3.  Explain the difference between a script and a transaction:

A script is a program that doesn't change the data on a blockchain, and is free.
A transaction creates or modifies blockchain data, and costs $$.




----------------- DAY 2 ----(done)-----------------------------

Q1.  What are the 5 Cadence Programming Language Pillars?

Security, Clarity, Approachability, Experience, and Resource Oriented.


Q2.  Why could the 5 Pillars be useful:

Pillars 1-4:  every good programming language aims for these (maybe apart from PROLOG).
Nobody aims for insecure, hard-to-read code with weird syntax and bad error messages.  
These 4 are important, but they don't differentiate Cadence--everybody tries.
How well does Cadence achieve them?...they're all tradeoffs, right?

Secure?  Somebody--I think his name was Jacob Tucker--already taught me that Cadence is NOT 100% secure.
I still have the power to do massive damage, even following the "official" tutorials.
Clarity and Approachability?  Hmm..heavy-typing is useful, but "approachable"?  I mean, look at this stuff:

let collection = getAccount(from).getCapability(KittyItems.CollectionPublicPath)!
.borrow<&KittyItems.Collection{KittyItems.KittyItemsCollectionPublic}>() 
?? panic("Couldn't get collection")

Panic indeed.

On the other hand, Resources are pretty interesting in the context of blockchain.

My question is how much of Cadence--including Resources--stems from the decision NOT to have 
the contract serve as a centralized accounting agency as with ERC-20 and ERC-721?

Putting "stuff" directly into User Accounts requires a different authentication mechanism.
This major difference I think is highly important and should be up front as a major differentiator.




Thanks for doing this--the course is great!
