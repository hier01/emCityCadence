Boot Camper:  Matt Hodges, aka hier01
QUESTS

Chapter 1 -------------------

Day 1

Explain what the Blockchain is:

It's a kind of database where the records are added in sequence and prior records can't be changed.
It's decentralized, meaning many copies of it are spread all over the place, 
so no single agency can mess with it without everybody knowing.  
It can be public or private, but we like it public.  



Explain what a Smart Contract is:

It's a lump of code that's stored on a blockchain (so it can't be messed with).
It's run by a virtual machine built into the blockchain (so it also can't be messed with).
Many nodes that run copies of the blockchain have the ability to run smart contracts.
Smart contracts can read and write results into the blockchain.
Every node should produce identical results.



Explain the difference between a script and a transaction:

A script is a program that doesn't change the data on a blockchain (free).
A transaction creates or modifies blockchain data (not free).




Day 2

What are the 5 Cadence Programming Language Pillars?

Security, Clarity, Approachability, Experience, and Resource Oriented.


Why could the 5 Pillars be useful:

Every successful programming language (maybe apart from PROLOG) aims for the first 4 Pillars.
Languages trying for insecure, hard-to-read code with weird syntax with no error messages don't last.  
So these 4 are important, but they don't differentiate Cadence.
And they may not even be achieved all that well...yet.  
A guy--I think his name was Jacob Tucker--already taught me that Cadence is NOT 100% secure.
I still have the power to do massive damage, even following the "official" tutorials.
Also, heavily-typed languages are useful but "approachable"?  I mean, look at this stuff:

let collection = getAccount(from).getCapability(KittyItems.CollectionPublicPath)!
.borrow<&KittyItems.Collection{KittyItems.KittyItemsCollectionPublic}>() 
?? panic("Couldn't get collection")

On the other hand, the Resources are pretty unique and interesting in the context of blockchain.

My question is how much of Cadence--including Resources--stems from the decision NOT to have 
the contract serve as a centralized accounting agency as with ERC-20 and ERC-721.
There the token contract maintains a list of every owner and their balance.  
Putting "stuff" directly into Vaults on the User Account requires a different authentication mechanism.
I believe is done by "borrowing Resources"?  
This major difference I think is highly important and should be up front as a major differentiator.




Thanks for doing this--the course is great.
