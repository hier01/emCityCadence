Camp Tucker Chapter 4


----------------------  Day 1 ----(done)-----------------------

Q1.	Explain what lives inside of an account.
	a.)	 Contracts
	b.)	Storage
	c.)	Links to Storage (Capabilities), Public and Private


Q2.	What is the difference between the /storage/, /public/, and /private/ paths?

	a.)	 Storage is where everything is actually stored; it’s used by authacct to store stuff;
	b.)	 Public paths provide publicly accessible links to entities in storage, such as NFTs; public paths are usually restricted via interfaces;
	c.)	Private paths are accessible to authacct and anyone authacct gives access to.


Q3.	What does .save() do? What does .load() do? What does .borrow() do?

	a.)	 Save, load, borrow are account functions related to storage.  Save is only accessible by authacct, used to place stuff in storage;
	b.)	Load is used to get stuff out of storage
	c.)	Borrow is used to get a reference to stuff in storage, so it can be read without actually taking it out of storage.


Q4.	Explain why we couldn't save something to our account storage inside of a script.
	
	Can’t save via script because save modifies the chain, so can only be done via transaction, and in the Prepare section since AuthAcct is needed.


Q5.	Explain why I couldn't save something to your account.

	Need the authAcct to save.  Hmm… maybe if I gave you my authAcct you could do it?


Q6.	Define a contract that returns a resource that has at least 1 field in it. Then, write 2 transactions:
	i.	A transaction that first saves the resource to account storage, then loads it out of account storage, logs a field inside the resource, and destroys it.
	ii.	A transaction that first saves the resource to account storage, then borrows a reference to it, and logs a field inside the resource.


	pub contract spiders {
		pub resource spider {
			pub let legs: Int
			pub let creepiness: UInt
			init(){
				self.legs = 8;
				self.creepiness = 100;
			}
		}
		pub fun getSpider(): @spider{
			return <- create spider()
		}
	}


	TX1 using LOAD:
	
	import spiders from 0x04

	transaction {
	  prepare(acct: AuthAccount) {
	    let Spinny <- spiders.getSpider()
	    acct.save(<- Spinny, to: /storage/PetSpider)

	    let BadSpider <- acct.load<@spiders.spider>( from:/storage/PetSpider ) 
	      ?? panic("Spider Escaped!")
	    log( BadSpider.creepiness )
	    destroy BadSpider
	  }
	  execute {   }
	}


	TX2 using BORROW:

	import spiders from 0x04

	transaction {
	  prepare(acct: AuthAccount) {
	    let Spinny <- spiders.getSpider()
	    acct.save(<- Spinny, to: /storage/newSpider)

	    let mySpider = acct.borrow<&spiders.spider>( from:/storage/newSpider ) 
	      ?? panic("Spider Gone!")
	    log( mySpider.legs )
	    
	  }
	  execute {   }
	}

------------------------ Day 2 ---(done)--------------------------

Q1.  What does .link() do?

	Link creates a link in the public or private path to a target in storage

Q2.  In your own words (no code), explain how we can use resource interfaces to only expose certain things to the /public/ path.

	A resource in storage might have some data or methods you want to share publicly, but others you don't.  You can apply an interace to specify exactly what is accessible to a borrowed resource.

Q3.  Deploy a contract that contains a resource that implements a resource interface:

		pub contract Aussies {
			pub resource interface iAnimal {
				pub var type: String
			}

			pub resource Animal: iAnimal {
				pub var type: String
				pub var name: String
				init(){
					self.type = "Kangaroo"
					self.name = "Roo"
				}
			}
		}


	In a transaction, save the resource to storage and link it to the public with the restrictive interface.

		import Aussies from 0x01

		transaction(){
		  prepare( signer: AuthAccount ){
		    let k: @Aussies.Animal <- Aussies.getAnimal()
		    signer.save( <- k, to: /storage/animal1 )
		    signer.link<&Aussies.Animal{Aussies.iAnimal}>( /public/animal1, target: /storage/animal1 )
		  }
		  execute{}
		}



	Run a script that tries to access a non-exposed field in the resource interface, and see the error pop up.


		import Aussies from 0x01

		pub fun main(): String {
		  let c: Capability<&Aussies.Animal{Aussies.iAnimal}> =
		      getAccount(0x01).getCapability<&Aussies.Animal{Aussies.iAnimal}>(/public/animal1)
		  let cref: &Aussies.Animal{Aussies.iAnimal} = c.borrow()!
		  return cref.name
		}

		ERROR: "member of restricted type is not available: name"



	Run the script and access something you CAN read from. Return it from the script.


		import Aussies from 0x01
		pub fun main(): String {
		  let c: Capability<&Aussies.Animal{Aussies.iAnimal}> =
		      getAccount(0x01).getCapability<&Aussies.Animal{Aussies.iAnimal}>(/public/animal1)
		  let cref: &Aussies.Animal{Aussies.iAnimal} = c.borrow()!
		  return cref.type
		}




----------------------  Day 3 ----(done)---------------------------

Q1.  What do you have to do if you have resources "nested" inside of another resource? ("Nested resources")

	I think you have to add to the NFT Resource:
		a.)  an index, equivalent to totalSupply
		b.)  its own Collection Resource, with methods allowing the NFT to deposit, withdraw, getIDs, and borrow
		


Q2.  Brainstorm some extra things we may want to add to this contract. Think about what might be problematic with this contract and how we could fix it.

	Umm... royalty handling, 


---------------------  Day 4 --------------------------------

Can you brainstorm any ways to distribute Minters to other people WITHOUT having to have 2 signers, or in other words, 2 AuthAccounts?

	Give other people a Capability to the Minter's resource





